{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","state","newTodo","handleChange","bind","handleSubmit","evt","this","setState","target","name","value","preventDefault","task","id","uuid","completed","addTodo","className","onSubmit","htmlFor","type","onChange","placeholder","onClick","Component","Todo","editing","edit","handleRemove","editTodo","handleEdit","handleCompletion","stopPropagation","removeTodo","editedTodo","completeTodo","classes","TodoList","todos","localStorage","getItem","storedTodos","JSON","parse","length","setItem","stringify","todo","todoID","filter","editedTodos","map","completedTodos","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8WAkDeA,G,wDA7CX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CAAEC,QAAS,IACxB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBALL,E,yDAQNE,GACTC,KAAKC,SAAL,eACKF,EAAIG,OAAOC,KAAOJ,EAAIG,OAAOE,U,mCAIzBL,GACTA,EAAIM,iBACJ,IAAMV,EAAU,CAAEW,KAAMN,KAAKN,MAAMC,QAASY,GAAIC,cAAQC,WAAW,GACnET,KAAKP,MAAMiB,QAAQf,GACnBK,KAAKC,SAAS,CACVN,QAAS,O,+BAKb,OACI,yBAAKgB,UAAU,YACX,0BAAMC,SAAUZ,KAAKF,cACjB,2BAAOe,QAAQ,WAAf,YACA,yBAAKF,UAAU,YACX,2BACIG,KAAK,OACLX,KAAK,UACLI,GAAG,UACHH,MAAOJ,KAAKN,MAAMC,QAClBoB,SAAUf,KAAKJ,aACfoB,YAAY,aAEhB,4BAAQC,QAASjB,KAAKF,cAAtB,mB,GAtCEoB,cC+EXC,G,wDA/EX,WAAY1B,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACT0B,SAAS,EACTC,KAAM,EAAK5B,MAAMa,MAErB,EAAKgB,aAAe,EAAKA,aAAazB,KAAlB,gBACpB,EAAK0B,SAAW,EAAKA,SAAS1B,KAAd,gBAChB,EAAKD,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAK2B,WAAa,EAAKA,WAAW3B,KAAhB,gBAClB,EAAK4B,iBAAmB,EAAKA,iBAAiB5B,KAAtB,gBAXT,E,yDAcNE,GACTA,EAAI2B,kBACJ1B,KAAKP,MAAMkC,WAAW3B,KAAKP,MAAMc,M,+BAG5BR,GACLA,EAAI2B,kBACJ1B,KAAKC,SAAS,CAAEmB,SAAS,M,mCAGhBrB,GACTC,KAAKC,SAAL,eACKF,EAAIG,OAAOC,KAAOJ,EAAIG,OAAOE,U,iCAI3BL,GACPA,EAAIM,iBACJ,IAAMuB,EAAa,CACftB,KAAMN,KAAKN,MAAM2B,KACjBd,GAAIP,KAAKP,MAAMc,IAEnBP,KAAKP,MAAM8B,SAASK,GACpB5B,KAAKC,SAAS,CACVmB,SAAS,M,yCAKbpB,KAAKP,MAAMoC,aAAa7B,KAAKP,MAAMc,M,+BAInC,IAAIuB,EAAU9B,KAAKP,MAAMgB,UAAY,aAAe,GACpD,OACI,yBAAKE,UAAU,QACVX,KAAKN,MAAM0B,QACR,0BAAMR,SAAUZ,KAAKwB,YACjB,yBAAKb,UAAU,UACX,2BACIG,KAAK,OACLX,KAAK,OACLI,GAAG,OACHH,MAAOJ,KAAKN,MAAM2B,KAClBN,SAAUf,KAAKJ,eAEnB,0CAIR,yBAAKqB,QAASjB,KAAKyB,iBAAkBd,UAAU,QAC3C,yBAAKA,UAAWmB,GACZ,wBAAInB,UAAU,QAAQX,KAAKP,MAAMa,OAErC,yBAAKK,UAAU,SACX,uBAAGA,UAAU,cAAcM,QAASjB,KAAKuB,WACzC,uBAAGZ,UAAU,eAAeM,QAASjB,KAAKsB,sB,GAvEnDJ,cCqFJa,G,wDAlFX,WAAYtC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTsC,MAAO,IAEX,EAAKtB,QAAU,EAAKA,QAAQb,KAAb,gBACf,EAAK8B,WAAa,EAAKA,WAAW9B,KAAhB,gBAClB,EAAK0B,SAAW,EAAKA,SAAS1B,KAAd,gBAChB,EAAKgC,aAAe,EAAKA,aAAahC,KAAlB,gBARL,E,gEAWf,GAAIoC,aAAaC,QAAQ,SAAU,CAC/B,IAAMC,EAAcC,KAAKC,MAAMJ,aAAaC,QAAQ,UAChDC,EAAYG,OAAS,GACrBtC,KAAKC,SAAS,CAAE+B,MAAOG,O,2CAM/B,IAAMH,EAAQhC,KAAKN,MAAMsC,MACzBC,aAAaM,QAAQ,QAASH,KAAKI,UAAUR,M,8BAEzCS,GACJzC,KAAKC,SAAS,CACV+B,MAAM,GAAD,mBAAOhC,KAAKN,MAAMsC,OAAlB,CAAyBS,Q,iCAI3BC,GACP1C,KAAKC,SAAS,CACV+B,MAAOhC,KAAKN,MAAMsC,MAAMW,QAAO,SAACF,GAAD,OAAUA,EAAKlC,KAAOmC,S,+BAIpDrB,GACL,IAAMuB,EAAc5C,KAAKN,MAAMsC,MAAMa,KAAI,SAACJ,GACtC,OAAIA,EAAKlC,KAAOc,EAAKd,GACV,eAAKkC,EAAZ,CAAkBnC,KAAMe,EAAKf,OAE1BmC,KAEXzC,KAAKC,SAAS,CAAE+B,MAAOY,M,mCAGdrC,GACT,IAAMuC,EAAiB9C,KAAKN,MAAMsC,MAAMa,KAAI,SAACJ,GACzC,OAAIA,EAAKlC,KAAOA,EACL,eAAKkC,EAAZ,CAAkBhC,WAAYgC,EAAKhC,YAEhCgC,KAEXzC,KAAKC,SAAS,CAAE+B,MAAOc,M,+BAGjB,IAAD,OACCd,EAAQhC,KAAKN,MAAMsC,MAAMa,KAAI,SAACJ,GAAD,OAC/B,kBAAC,EAAD,CACIM,IAAKN,EAAKlC,GACVA,GAAIkC,EAAKlC,GACTD,KAAMmC,EAAKnC,KACXG,UAAWgC,EAAKhC,UAChBkB,WAAY,EAAKA,WACjBJ,SAAU,EAAKA,SACfM,aAAc,EAAKA,kBAG3B,OACI,yBAAKlB,UAAU,YACX,yBAAKA,UAAU,kBACX,0CACA,yDAEJ,4BACI,yBAAKA,UAAU,SAASqB,IAE5B,kBAAC,EAAD,CAAatB,QAASV,KAAKU,e,GA7EpBQ,cCOR8B,MARf,WACC,OACC,yBAAKrC,UAAU,OACd,kBAAC,EAAD,QCKiBsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.26d24c60.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport './NewTodoForm.css';\n\nclass NewTodoForm extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { newTodo: '' };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(evt) {\n        this.setState({\n            [evt.target.name]: evt.target.value\n        });\n    }\n\n    handleSubmit(evt) {\n        evt.preventDefault();\n        const newTodo = { task: this.state.newTodo, id: uuid(), completed: false };\n        this.props.addTodo(newTodo);\n        this.setState({\n            newTodo: ''\n        });\n    }\n\n    render() {\n        return (\n            <div className='todoForm'>\n                <form onSubmit={this.handleSubmit}>\n                    <label htmlFor='newTodo'>New Todo</label>\n                    <div className='todoArea'>\n                        <input\n                            type='text'\n                            name='newTodo'\n                            id='newTodo'\n                            value={this.state.newTodo}\n                            onChange={this.handleChange}\n                            placeholder='New Todo'\n                        />\n                        <button onClick={this.handleSubmit}>Add Todo</button>\n                    </div>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default NewTodoForm;\n","import React, { Component } from 'react';\nimport './Todo.css';\n\nclass Todo extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            editing: false,\n            edit: this.props.task\n        };\n        this.handleRemove = this.handleRemove.bind(this);\n        this.editTodo = this.editTodo.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleEdit = this.handleEdit.bind(this);\n        this.handleCompletion = this.handleCompletion.bind(this);\n    }\n\n    handleRemove(evt) {\n        evt.stopPropagation();\n        this.props.removeTodo(this.props.id);\n    }\n\n    editTodo(evt) {\n        evt.stopPropagation();\n        this.setState({ editing: true });\n    }\n\n    handleChange(evt) {\n        this.setState({\n            [evt.target.name]: evt.target.value\n        });\n    }\n\n    handleEdit(evt) {\n        evt.preventDefault();\n        const editedTodo = {\n            task: this.state.edit,\n            id: this.props.id\n        };\n        this.props.editTodo(editedTodo);\n        this.setState({\n            editing: false\n        });\n    }\n\n    handleCompletion() {\n        this.props.completeTodo(this.props.id);\n    }\n\n    render() {\n        let classes = this.props.completed ? ' Completed' : '';\n        return (\n            <div className='Todo'>\n                {this.state.editing ? (\n                    <form onSubmit={this.handleEdit}>\n                        <div className='editor'>\n                            <input\n                                type='text'\n                                name='edit'\n                                id='edit'\n                                value={this.state.edit}\n                                onChange={this.handleChange}\n                            />\n                            <button>Save</button>\n                        </div>\n                    </form>\n                ) : (\n                    <div onClick={this.handleCompletion} className='item'>\n                        <div className={classes}>\n                            <li className='task'>{this.props.task}</li>\n                        </div>\n                        <div className='icons'>\n                            <i className='fas fa-edit' onClick={this.editTodo} />\n                            <i className='fas fa-trash' onClick={this.handleRemove} />\n                        </div>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Todo;\n","import React, { Component } from 'react';\nimport NewTodoForm from './NewTodoForm';\nimport Todo from './Todo';\nimport './TodoList.css';\n\nclass TodoList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todos: []\n        };\n        this.addTodo = this.addTodo.bind(this);\n        this.removeTodo = this.removeTodo.bind(this);\n        this.editTodo = this.editTodo.bind(this);\n        this.completeTodo = this.completeTodo.bind(this);\n    }\n    componentDidMount() {\n        if (localStorage.getItem('todos')) {\n            const storedTodos = JSON.parse(localStorage.getItem('todos'));\n            if (storedTodos.length > 0) {\n                this.setState({ todos: storedTodos });\n            }\n        }\n    }\n\n    componentDidUpdate() {\n        const todos = this.state.todos;\n        localStorage.setItem('todos', JSON.stringify(todos));\n    }\n    addTodo(todo) {\n        this.setState({\n            todos: [ ...this.state.todos, todo ]\n        });\n    }\n\n    removeTodo(todoID) {\n        this.setState({\n            todos: this.state.todos.filter((todo) => todo.id !== todoID)\n        });\n    }\n\n    editTodo(edit) {\n        const editedTodos = this.state.todos.map((todo) => {\n            if (todo.id === edit.id) {\n                return { ...todo, task: edit.task };\n            }\n            return todo;\n        });\n        this.setState({ todos: editedTodos });\n    }\n\n    completeTodo(id) {\n        const completedTodos = this.state.todos.map((todo) => {\n            if (todo.id === id) {\n                return { ...todo, completed: !todo.completed };\n            }\n            return todo;\n        });\n        this.setState({ todos: completedTodos });\n    }\n\n    render() {\n        const todos = this.state.todos.map((todo) => (\n            <Todo\n                key={todo.id}\n                id={todo.id}\n                task={todo.task}\n                completed={todo.completed}\n                removeTodo={this.removeTodo}\n                editTodo={this.editTodo}\n                completeTodo={this.completeTodo}\n            />\n        ));\n        return (\n            <div className='TodoList'>\n                <div className='TodoListHeader'>\n                    <h1>Todo List!</h1>\n                    <p>A Simple React Todo List.</p>\n                </div>\n                <ul>\n                    <div className='Todos'>{todos}</div>\n                </ul>\n                <NewTodoForm addTodo={this.addTodo} />\n            </div>\n        );\n    }\n}\n\nexport default TodoList;\n","import React from 'react';\nimport './App.css';\nimport TodoList from './TodoList';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<TodoList />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}